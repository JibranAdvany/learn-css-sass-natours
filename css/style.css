/* Basic CSS reset */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  font-size: 62.5%;
  /* It is a good practice not to use pixels and rather use percentages as this would allow for fluid layouts. */ }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 1.6rem; */
  line-height: 1.7;
  /* Line height 1.7 means that height of each of the line in output will be 1.7 times of the font-size */
  color: #777;
  padding: 3rem;
  box-sizing: border-box; }

.header {
  height: 95vh;
  /* 95 vh means 95% of the viewport height in the browser */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("./../img/hero.jpg");
  background-size: cover;
  background-position: center;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative; }

.header__logo-box {
  position: absolute;
  /* This would be relative to parent or where relative property is define. */
  top: 4rem;
  left: 4rem; }

.header__logo {
  height: 3.5rem; }

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* above code is to center an element; vertically and horizontally */
  text-align: center; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* Animation fix */
  backface-visibility: hidden;
  margin-bottom: 6rem; }

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /* Applying the animation */
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */ }

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  /* Applying the animation */
  animation: moveInRight 1s ease-out; }

/* Animations */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
    /* For best performance, it is recommended only to use opacity and transform in animations */ }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(5rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn:link,
.btn:visited {
  font-size: 1.6rem;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  position: relative;
  transition: all 0.2s;
  /* simple short animations; usually for subtle effects purpose */ }

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--white::after {
  background-color: #fff; }

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
  /* opacity is the last step */ }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.4s backwards;
  /* the last one is animation fill mode which applies the 0% before the start. There is a CSS property for that. */ }
